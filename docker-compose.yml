version: '3.9'
services:

  elastic-search:
    container_name: smses01
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.routing.allocation.disk.threshold_enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - sms

  backend:
    image: python:3.9-slim-buster
    working_dir: /usr/src/app
    volumes:
      - './backend/app:/usr/src/app'
    ports:
      - "5000:5000"
    env_file:
      - docker/backend.dev
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-admin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minio123}
      MINIO_SECURE: ${MINIO_SECURE:-False}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-sms-attachments}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT:-minio:9000}
      DOWNLOAD_ENDPOINT: ${DOWNLOAD_ENDPOINT:-https://localhost.localdomain}
    depends_on:
      - db
    command: >
      sh -c "
      apt-get update && apt-get install -y  --no-install-recommends \
        gcc \
        libssl-dev \
        libffi-dev \
        musl-dev \
        cargo \
      && apt-get clean
      && pip install --no-cache-dir --upgrade pip
      && pip install --no-cache-dir -r requirements.txt
      && python manage.py db upgrade
      && gunicorn -b 0.0.0.0:5000 manage:app --reload
      "
    networks:
      - sms

  db:
    image: postgres:12-alpine
    ports:
      - "5433:5433"
    env_file:
      - ./backend/app_env/db_secrets.env
    volumes:
      - ./backend/app/project/db/create.sql:/docker-entrypoint-initdb.d/create.sql
    networks:
      - sms
    command: -p 5433

  vocabulary:
    image: python:3-alpine
    working_dir: /usr/cv/app
    volumes:
      - './sms-cv/src:/usr/cv/app'
      - static-files:/usr/cv/app/static
    ports:
      - 8000:8000
    env_file:
      - ./docker/cv.dev
    command: >
      sh -c "
      apk add --no-cache --virtual .build-deps \
          gcc \
          python3-dev \
          musl-dev \
          postgresql-dev \
      && pip install --upgrade pip
      && pip install -r requirements.txt
      && python manage.py migrate
      && python manage.py loaddata initial_data.json
      && python manage.py loaddata default_community_data.json
      && python manage.py collectstatic --noinput
      && gunicorn cv.wsgi:application --bind 0:8000 --reload
            "
    networks:
      - sms
    depends_on:
      - db

  frontend:
    build:
      context: '.'
      dockerfile: './frontend/docker/local-dev/Dockerfile-local-dev'
    working_dir: /home/node/
    user: "node"
    networks:
      - sms
    ports:
      - 3000:3000
    environment:
      BASE_URL: ${BASE_URL:-/}
      SMS_BACKEND_URL: ${SMS_BACKEND_URL:-https://localhost.localdomain/backend/rdm/svm-api/v1}
      CV_BACKEND_URL: ${CV_BACKEND_URL:-/cv/api/v1}
      NUXT_ENV_REDIRECT_URI: ${NUXT_ENV_REDIRECT_URI:-https://localhost.localdomain/login-callback}
      NUXT_ENV_CLIENT_ID: ${NUXT_ENV_CLIENT_ID:-rdmsvm-implicit-flow}
      NUXT_ENV_AUTHORITY: ${NUXT_ENV_AUTHORITY:-https://webapp.ufz.de/idp/oidc/v1/}
      NUXT_ENV_RESPONSE_TYPE: ${NUXT_ENV_RESPONSE_TYPE:-id_token}
      NUXT_ENV_SCOPE: ${NUXT_ENV_SCOPE:-openid profile email}
      NUXT_ENV_POST_LOGOUT_REDIRECT_URI: ${NUXT_ENV_POST_LOGOUT_REDIRECT_URI:-https://localhost.localdomain/logout-callback}
      NUXT_ENV_SILENT_REDIRECT_URI: ${NUXT_ENV_SILENT_REDIRECT_URI:-https://localhost.localdomain/silent-callback}
      NUXT_ENV_FILTER_PROTOCOL_CLAIMS: ${NUXT_ENV_FILTER_PROTOCOL_CLAIMS:-false}
      NUXT_ENV_AUTOMATIC_SILENT_RENEW: ${NUXT_ENV_AUTOMATIC_SILENT_RENEW:-false}
      NUXT_ENV_SILENT_RENEW_INTERVAL: ${NUXT_ENV_SILENT_RENEW_INTERVAL:-6900000}
      NUXT_ENV_LOAD_USER_INFO: ${NUXT_ENV_LOAD_USER_INFO:-true}
      STAY_WITH_HTTP: ${STAY_WITH_HTTP:-true }
    volumes:
      - ./frontend/:/home/node/
      - ./frontend/dist:/home/node/dist/:rw
    command: >
      bash -c "npm install
      && npm run dev"

  minio:
    image: minio/minio:RELEASE.2021-07-12T02-44-53Z
    volumes:
      - minio-data:/data/minio
    ports:
      - 9000:9000
      - 9001:9001
    networks:
      - sms
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-admin}
      MINIO_ROOT_PASSWORD: ${minio_user_password:-minio123}
    #       To deactivate the console
#      MINIO_BROWSER: "off"
    command: server /data/minio --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://minio:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  createbuckets:
    image: minio/mc:latest
    depends_on:
      - minio
    networks:
      - sms
    # Make a Bucket using minio client mc
    # https://docs.min.io/docs/minio-client-complete-guid
    entrypoint: >
      /bin/sh -c "
      until curl -f http://minio:9000/minio/health/live; do sleep 5; done;
      /usr/bin/mc  alias set minio http://minio:9000 ${MINIO_ACCESS_KEY:-admin} ${MINIO_SECRET_KEY:-minio123} --api S3v4;
      /usr/bin/mc mb --quiet minio/${MINIO_BUCKET_NAME:-sms-attachments};
      /usr/bin/mc policy set download minio/${MINIO_BUCKET_NAME:-sms-attachments};
      exit 0;
      "

  nginx:
    image: nginx:1.20-alpine
    ports:
      - 443:443
      - 8443:8443
    networks:
      - sms
    volumes:
      - ./ngnix/certs:/etc/nginx/ssl
      - ./ngnix/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ngnix/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/dist:/etc/nginx/html
      - static-files:/usr/share/nginx/html/static:ro


volumes:
  esdata01:
    driver: local
  minio-data: {}
  static-files: {}

networks:
  sms: